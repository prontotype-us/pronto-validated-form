// Generated by CoffeeScript 1.10.0
var React, Toggle, ValidatedField, ValidatedFormMixin, helpers, validation;

React = require('react');

helpers = require('./helpers');

validation = require('./validation');

ValidatedFormMixin = {
  validate: function() {
    return helpers.compactObj(helpers.mapObjKey(this.fields, (function(_this) {
      return function(field_name) {
        return _this.refs[field_name].validate();
      };
    })(this)));
  },
  values: function() {
    return helpers.mapObjKey(this.fields, (function(_this) {
      return function(field_name) {
        return _this.refs[field_name].value();
      };
    })(this));
  },
  trySubmit: function(e) {
    var errors, values;
    e.preventDefault();
    if (!this.state.loading) {
      this.setState({
        errors: {}
      });
      errors = this.validate();
      if (Object.keys(errors).length > 0) {
        return this.setState({
          errors: errors
        });
      } else {
        values = this.values();
        return this.onSubmit(values);
      }
    }
  },
  onChange: function(key) {
    return (function(_this) {
      return function(value) {
        var values;
        values = _this.state.values || {};
        values[key] = value;
        return _this.setState({
          values: values
        }, function() {
          return typeof _this.onChanged === "function" ? _this.onChanged(key, value) : void 0;
        });
      };
    })(this);
  },
  clear: function() {
    return this.setState({
      values: {},
      errors: {}
    });
  },
  renderField: function(field_name) {
    var field, ref, ref1;
    field = this.fields[field_name];
    return React.createElement(ValidatedField, React.__spread({}, field, {
      "ref": field_name,
      "key": field_name,
      "name": field_name,
      "value": (ref = this.state.values) != null ? ref[field_name] : void 0,
      "error": (ref1 = this.state.errors) != null ? ref1[field_name] : void 0,
      "onChange": this.onChange(field_name)
    }));
  }
};

ValidatedField = React.createClass({displayName: "ValidatedField",
  getDefaultProps: function() {
    return {
      type: 'text'
    };
  },
  value: function() {
    return this.props.value;
  },
  validate: function() {
    var validator;
    if (this.props.optional) {
      return null;
    }
    validator = this.props.validator || validation[this.props.type] || validation.exists;
    if (!validator(this.props.value)) {
      return this.props.error_message || ("Nothing in " + this.props.name);
    }
    return null;
  },
  changeValue: function(e) {
    var value;
    console.log('e =', e);
    console.log('e.target.value =', e.target.value);
    value = e.target != null ? e.target.value : e;
    console.log('value =', value);
    return this.props.onChange(value);
  },
  render: function() {
    var form_group_class;
    form_group_class = 'form-group' + (this.props.className ? ' ' + this.props.className : '') + (this.props.error ? ' has-error' : '') + (!this.props.optional ? ' required' : '');
    return React.createElement("div", {
      "className": form_group_class,
      "key": 'field-' + this.props.name
    }, (this.props.icon ? React.createElement("i", {
      "className": "fa fa-" + this.props.icon
    }) : void 0), (this.props.type !== 'hidden' ? React.createElement("label", {
      "htmlFor": this.props.name
    }, this.props.label || this.props.name) : void 0), ((function() {
      switch (this.props.type) {
        case 'toggle':
          return React.createElement(Toggle, {
            "options": this.props.options,
            "onChange": this.changeValue,
            "selected": this.props.value
          });
        case 'select':
          return React.createElement("select", {
            "value": this.props.value,
            "onChange": this.changeValue
          }, React.createElement("option", null, "Select one"), this.props.options.map(function(o) {
            return React.createElement("option", {
              "value": o.value || o
            }, o.display || o);
          }));
        default:
          return React.createElement("input", {
            "key": this.props.name,
            "name": this.props.name,
            "type": this.props.type,
            "placeholder": this.props.placeholder || this.props.name,
            "value": this.props.value,
            "onChange": this.changeValue
          });
      }
    }).call(this)), (this.props.error ? React.createElement("span", {
      "className": 'error'
    }, this.props.error) : void 0));
  }
});

Toggle = React.createClass({displayName: "Toggle",
  getInitialState: function() {
    return {
      selected: this.props.selected || ''
    };
  },
  select: function(key) {
    return (function(_this) {
      return function() {
        var base;
        _this.value = key;
        _this.setState({
          selected: key
        });
        return typeof (base = _this.props).onChange === "function" ? base.onChange(key) : void 0;
      };
    })(this);
  },
  selected: function(key) {
    if (this.state.selected === key) {
      return 'selected';
    } else {
      return '';
    }
  },
  render: function() {
    return React.createElement("div", {
      "className": 'toggle'
    }, this.props.options.map(this.renderOption));
  },
  renderOption: function(option, i) {
    return React.createElement("a", {
      "key": i,
      "onClick": this.select(option),
      "className": this.selected(option)
    }, option);
  }
});

module.exports = {
  ValidatedField: ValidatedField,
  ValidatedFormMixin: ValidatedFormMixin
};
